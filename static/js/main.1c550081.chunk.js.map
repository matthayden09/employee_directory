{"version":3,"sources":["components/API.js","components/Employee.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["axios","get","Employee","props","scope","employeeKey","alt","firstName","src","image","lastName","email","phone","location","TableDiv","styled","div","Table","state","employees","shownEmployees","API","then","response","setState","data","results","console","log","catch","err","error","className","this","map","employee","index","picture","thumbnail","name","first","last","country","Component","App","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAEe,EACM,WACb,OAAOA,IAAMC,IAAI,0C,OCcVC,I,EAAAA,EAff,SAAkBC,GACd,OACI,+BACI,oBAAIC,MAAM,MAAV,SAAiBD,EAAME,cACvB,6BAAI,qBAAKC,IAAKH,EAAMI,UAAWC,IAAKL,EAAMM,UAC1C,6BAAKN,EAAMI,YACX,6BAAKJ,EAAMO,WACX,6BAAKP,EAAMQ,QACX,6BAAKR,EAAMS,QACX,6BAAKT,EAAMU,eCNjBC,E,MAAWC,EAAOC,IAAV,yEAwDCC,E,4MAjDXC,MAAQ,CACJC,UAAW,GACXC,eAAgB,I,uDAGpB,WAAqB,IAAD,OAChBC,IACKC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAAE,UAAaD,EAASE,KAAKC,QAAS,eAAkBH,EAASE,KAAKC,UACpFC,QAAQC,IAAI,EAAKV,MAAMC,cAE1BU,OAAM,SAAAC,GAAG,OAAIH,QAAQI,MAAMD,Q,oBAGpC,WACI,OACI,cAAChB,EAAD,UACI,wBAAOkB,UAAU,QAAjB,UACI,+BACI,oBAAI5B,MAAM,MAAV,eACA,oBAAIA,MAAM,MAAV,qBACA,oBAAIA,MAAM,MAAV,wBACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,0BACA,oBAAIA,MAAM,MAAV,wBAEJ,gCACK6B,KAAKf,MAAMC,UAAUe,KAAI,SAACC,EAAUC,GACjC,OACI,cAAC,EAAD,CAEI/B,YAAa+B,EAAQ,EACrB3B,MAAO0B,EAASE,QAAQC,UACxB/B,UAAW4B,EAASI,KAAKC,MACzB9B,SAAUyB,EAASI,KAAKE,KACxB9B,MAAOwB,EAASxB,MAChBC,MAAOuB,EAASvB,MAChBC,SAAUsB,EAAStB,SAAS6B,SAPvBN,iB,GAhCrBO,a,MCULC,MAjBf,WACE,OACE,sBAAKZ,UAAU,MAAf,UAEE,mCACE,oDACA,uBACA,wBAAQa,KAAK,SAASb,UAAU,kBAAhC,sCAEF,uBAEA,cAAC,EAAD,QCJSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1c550081.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default {\n    getRandomPerson: () => {\n        return axios.get(\"https://randomuser.me/api/?results=25\")\n    }\n}","import React from \"react\";\n\n\nfunction Employee(props) {\n    return (\n        <tr>\n            <th scope=\"row\">{props.employeeKey}</th>\n            <td><img alt={props.firstName} src={props.image} /></td>\n            <td>{props.firstName}</td>\n            <td>{props.lastName}</td>\n            <td>{props.email}</td>\n            <td>{props.phone}</td>\n            <td>{props.location}</td>\n        </tr>\n    )\n\n}\n\nexport default Employee;","import React, { Component } from 'react'\nimport API from './API'\nimport Employee from './Employee'\nimport styled from 'styled-components'\n\n\nconst TableDiv = styled.div`\nbackground-color: white;\ntext-align: left;\n`\n\n\nclass Table extends Component {\n    state = {\n        employees: [],\n        shownEmployees: []\n    }\n\n    componentDidMount() {\n        API.getRandomPerson()\n            .then(response => {\n                this.setState({ \"employees\": response.data.results, \"shownEmployees\": response.data.results })\n                console.log(this.state.employees)\n            })\n            .catch(err => console.error(err))\n    }\n\n    render() {\n        return (\n            <TableDiv>\n                <table className=\"table\">\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Picture</th>\n                        <th scope=\"col\">First Name</th>\n                        <th scope=\"col\">Last Name</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">Phone Number</th>\n                        <th scope=\"col\">Country</th>\n                    </tr>\n                    <tbody>\n                        {this.state.employees.map((employee, index) => {\n                            return (\n                                <Employee\n                                    key={index}\n                                    employeeKey={index + 1}\n                                    image={employee.picture.thumbnail}\n                                    firstName={employee.name.first}\n                                    lastName={employee.name.last}\n                                    email={employee.email}\n                                    phone={employee.phone}\n                                    location={employee.location.country}\n                                />\n                            )\n                        })}\n                    </tbody>\n                </table>\n            </TableDiv>\n        );\n    }\n}\n\nexport default Table","import React, { Component } from \"react\";\nimport './App.css';\nimport Table from './components/Table'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <header>\n        <h2>Employee Directory</h2>\n        <br></br>\n        <button type=\"button\" className=\"btn btn-primary\">Sort by Last Name A-Z</button>\n      </header>\n      <br></br>\n\n      <Table />\n\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}